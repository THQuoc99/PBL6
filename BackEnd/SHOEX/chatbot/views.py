from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import json
import os
import requests

# üîë L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c d√πng key m·∫∑c ƒë·ªãnh
OPENROUTER_API_KEY = os.getenv(
    "OPENROUTER_API_KEY",
    "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"
)

@csrf_exempt
def chat_with_gpt(request):
    if request.method != "POST":
        return JsonResponse({"error": "Invalid request method"}, status=405)

    try:
        data = json.loads(request.body.decode('utf-8'))
        user_message = data.get("message", "").strip()
        print("üß† User message:", user_message)

        if not user_message:
            return JsonResponse({"error": "Tin nh·∫Øn tr·ªëng. Vui l√≤ng nh·∫≠p n·ªôi dung."}, status=400)

        # üß† G·ª≠i request ƒë·∫øn OpenRouter API
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "Referer": "http://localhost:8000",   # ‚úÖ ƒë√∫ng header b·∫Øt bu·ªôc
            "X-Title": "SHOEX Chatbot"            # ‚úÖ t√™n app hi·ªÉn th·ªã tr√™n dashboard OpenRouter
        }

        payload = {
            "model": "meta-llama/llama-3-8b-instruct",
            "messages": [
                {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω ·∫£o h·ªó tr·ª£ kh√°ch h√†ng mua gi√†y SHOEX."},
                {"role": "user", "content": user_message}
            ]
        }

        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)

        print("üîç OpenRouter raw status:", response.status_code)
        print("üîç OpenRouter raw response:", response.text)

        if response.status_code != 200:
            return JsonResponse({
                "error": f"Error code: {response.status_code}",
                "details": response.json()
            }, status=response.status_code)

        result = response.json()

        # üß© Ki·ªÉm tra ph·∫£n h·ªìi c√≥ h·ª£p l·ªá kh√¥ng
        if "choices" in result and len(result["choices"]) > 0:
            reply = result["choices"][0]["message"]["content"]
            return JsonResponse({"response": reply})

        # N·∫øu ph·∫£n h·ªìi b·∫•t th∆∞·ªùng
        return JsonResponse({
            "error": "Ph·∫£n h·ªìi kh√¥ng x√°c ƒë·ªãnh t·ª´ OpenRouter",
            "raw": result
        }, status=400)

    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)
